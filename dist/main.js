(()=>{"use strict";class t{constructor(t){this.cardId=Number(t)}static VALUES=[3,4,5,6,7,8,9,10,"J","Q","K","A",2];static SUITS=["Clubs","Spades","Hearts","Diamonds"];static longVALUES=["Three","Four","Five","Six","Seven","Eight","Nine","Ten","Jack","Queen","King","Ace","Two"];get val(){return Math.floor(this.cardId/4)}get suit(){return this.cardId%4}get imagePath(){return"./Cards/card"+t.SUITS[this.suit]+t.VALUES[this.val]+".png"}static generateDeck(){let e=[];for(let r=0;r<52;r++)e.push(new t(r));return e}toString(){return`${t.longVALUES[this.val]} of ${t.SUITS[this.suit]}`}get succVal(){return(this.val()+1)%13}}class e{static singleCard=0;static pair=1;static trio=2;static quadro=3;static flush=4;static straight=5;static fullHouse=6;static quadroHouse=7;static royalFlush=8;static names=["Single Card","Pair","Trio","Quadro","Flush","Straight","Full House","Quadro Full House","Royal Flush"];constructor(t){this.cardArr=t,this.type=this.#getType(),this.score=this.#calcScore()}beats(t){return this.cardArr.length==t.cardArr.length&&this.score>t.score}toString(){return`${e.names[this.type]}: ${this.cardArr}`}#getType(){switch(this.cardArr.length){case 1:return e.singleCard;case 2:if(this.#isSameVal)return e.pair;break;case 3:if(this.#isSameVal)return e.trio;break;case 4:if(this.#isSameVal)return e.quadro;break;case 5:return this.#get5CardType();default:throw"invalid hand"}}#get5CardType(){if(this.#isFlush&&this.#isStraight)return e.royalFlush;if(this.#isFlush)return e.flush;if(this.#isStraight)return e.straight;if(this.#isFullHouse)return e.fullHouse;if(this.#isQuadHouse)return e.quadroHouse;throw"invalid hand"}get#isFullHouse(){let t=this.#sortedVals,e=t[0]==t[1]&&t[1]==t[2]||t[2]==t[3]&&t[3]==t[4],r=t[0]==t[1]&&t[3]==t[4];return e&&r}get#isQuadHouse(){let t=this.#sortedVals,e=t[1]==t[2]&&t[2]==t[3],r=t[0]==t[2]||t[4]==t[2];return e&&r}get#isStraight(){return function(t){for(let e=0;e<t.length-1;e++)if(t[e]+1!==t[e+1])return!1;return!0}(this.#sortedVals)}get#isFlush(){return r(this.cardArr.map((t=>t.suit)))}get#sortedVals(){return this.cardArr.map((t=>t.val)).sort()}#calcScore(){let t=1e3*this.type;switch(this.type){case e.singleCard:case e.pair:case e.trio:case e.quadro:case e.straight:case e.royalFlush:return t+this.#weakestCard.cardId;case e.fullHouse:case e.quadroHouse:return t+this.#majorityVal;case e.flush:return t+100*this.cardArr[0].suit+this.#weakestCard.cardId;default:throw"invalid hand"}}get#weakestCard(){return this.cardArr.reduce(((t,e)=>t.cardId<e.cardId?t:e))}get#majorityVal(){return this.#sortedVals[2]}get#isSameVal(){return r(this.#sortedVals)}}function r(t,e=0,r=t.length){for(let s=e;s<r;s++)if(t[s]!=t[e])return!1;return!0}let s=[],a=document.getElementById("deck"),i=document.querySelector("#trickBox"),c=document.querySelector("#scoreBox");const u=document.querySelector("#selectedList");function n(){try{let r=s.map((e=>new t(e)));return new e(r)}catch(t){return null}}t.generateDeck().forEach((function(e){let r=document.createElement("div");r.className="card",r.classList.add(`card${t.SUITS[e.suit]}${t.VALUES[e.val]}`),r.dataset.cardId=e.cardId,r.addEventListener("click",(t=>{!function(t){let e=t.dataset.cardId;s.includes(e)?function(t){let e=t.dataset.cardId;s=s.filter((t=>t!=e)),t.classList.remove("selected")}(t):function(t){let e=t.dataset.cardId;s.push(e),t.classList.add("selected")}(t),i.textContent=`${n()}`,c.textContent=`Score: ${n()?.score}`,u.textContent=`Selected: ${s}`}(t.target)})),a.append(r)}))})();